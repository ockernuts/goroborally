// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tile tile
// swagger:model tile
type Tile struct {

	// direction
	Direction Direction `json:"direction,omitempty"`

	// Type of the tile on the board. A plain tile is by default used for all tiles of a board for which no tile element was even given. As such
	// Required: true
	Type *string `json:"type"`

	// position of the tile on the board. Range: 0..board.width-1
	// Required: true
	// Minimum: 1
	X *int32 `json:"x"`

	// position of the tile on the board. Range: 0..board.height-1
	// Required: true
	// Minimum: 1
	Y *int32 `json:"y"`
}

// Validate validates this tile
func (m *Tile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateX(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateY(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tile) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if err := m.Direction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direction")
		}
		return err
	}

	return nil
}

var tileTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["plain","hole","belt","fastbelt","repair","repair2x"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tileTypeTypePropEnum = append(tileTypeTypePropEnum, v)
	}
}

const (
	// TileTypePlain captures enum value "plain"
	TileTypePlain string = "plain"
	// TileTypeHole captures enum value "hole"
	TileTypeHole string = "hole"
	// TileTypeBelt captures enum value "belt"
	TileTypeBelt string = "belt"
	// TileTypeFastbelt captures enum value "fastbelt"
	TileTypeFastbelt string = "fastbelt"
	// TileTypeRepair captures enum value "repair"
	TileTypeRepair string = "repair"
	// TileTypeRepair2x captures enum value "repair2x"
	TileTypeRepair2x string = "repair2x"
)

// prop value enum
func (m *Tile) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tileTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Tile) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Tile) validateX(formats strfmt.Registry) error {

	if err := validate.Required("x", "body", m.X); err != nil {
		return err
	}

	if err := validate.MinimumInt("x", "body", int64(*m.X), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Tile) validateY(formats strfmt.Registry) error {

	if err := validate.Required("y", "body", m.Y); err != nil {
		return err
	}

	if err := validate.MinimumInt("y", "body", int64(*m.Y), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Tile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tile) UnmarshalBinary(b []byte) error {
	var res Tile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
