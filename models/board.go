// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Board Roborally board on which a game can be played
// swagger:model board
type Board struct {

	// If not given upon creation a default description is generated
	// Required: true
	// Min Length: 1
	Description *string `json:"description"`

	// height
	// Required: true
	// Minimum: 1
	Height *int32 `json:"height"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// tiles
	// Required: true
	Tiles BoardTiles `json:"tiles"`

	// width
	// Required: true
	// Minimum: 1
	Width *int32 `json:"width"`
}

// Validate validates this board
func (m *Board) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHeight(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWidth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Board) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 1); err != nil {
		return err
	}

	return nil
}

func (m *Board) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	if err := validate.MinimumInt("height", "body", int64(*m.Height), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Board) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *Board) validateTiles(formats strfmt.Registry) error {

	if err := validate.Required("tiles", "body", m.Tiles); err != nil {
		return err
	}

	if err := m.Tiles.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tiles")
		}
		return err
	}

	return nil
}

func (m *Board) validateWidth(formats strfmt.Registry) error {

	if err := validate.Required("width", "body", m.Width); err != nil {
		return err
	}

	if err := validate.MinimumInt("width", "body", int64(*m.Width), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Board) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Board) UnmarshalBinary(b []byte) error {
	var res Board
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
